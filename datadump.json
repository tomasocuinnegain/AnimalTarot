{
    "%dna": {
        "header": {
            "type": "%dna",
            "signature": "{[172 204 50 103 163 112 101 40 81 172 233 110 10 221 144 142 60 71 121 98 22 178 44 44 236 122 58 5 79 122 63 235 150 91 199 118 227 11 23 132 234 13 202 207 54 235 165 148 97 135 129 216 65 254 70 9 221 36 161 6 243 59 107 10]}",
            "hash": "QmNsQRSpDjPG3MxRKabWi2N8D4NiMP5fTCDzARtLp8TmqP",
            "time": "2018-10-06 14:47:56.53952524 -0400 EDT",
            "nextHeader": "",
            "next": "%dna: ",
            "entry": "QmVg7S87ngRk9iMdkEjTnwATXL47nXiNxExxgDDpVAcZgZ"
        },
        "content": {
            "Version": 1,
            "UUID": "32e28461-5ffe-482c-8de6-a4f13c98be6b",
            "Name": "tea-app",
            "Properties": {
                "description": "Tea Supply Chain",
                "language": "en"
            },
            "PropertiesSchema": "",
            "PropertiesSchemaFile": "",
            "AgentIdentitySchema": "",
            "BasedOn": "",
            "RequiresVersion": 0,
            "DHTConfig": {
                "HashType": "sha2-256",
                "RedundancyFactor": 0
            },
            "Progenitor": {
                "Identity": "",
                "PubKey": null
            },
            "Zomes": [
                {
                    "Name": "tea",
                    "Description": "tea module",
                    "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction teaCreate (teaEntry) {\n  var teaHash = commit(\"tea\", teaEntry);\n  return teaHash;\n}\n\nfunction teaRead (teaHash) {\n  var tea = get(teaHash);\n  return tea;\n}\n\nfunction teaUpdate (teaHash) {\n  var sampleValue={\"type\":\"Black\",\"grade\":\"SFTGFOP1\",\"extraField\":true};\n  var teaOutHash = update(\"tea\", sampleValue, teaHash);\n  return teaOutHash;\n}\n\nfunction teaDelete (teaHash) {\n  var result = remove(teaHash, \"\");\n  return result;\n}\n\nfunction listTea (params) {\n  // your custom code here\n  return {};\n}\n\nfunction searchTea (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"tea\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"tea\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"tea\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"tea\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"tea\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}",
                    "Entries": [
                        {
                            "Name": "tea",
                            "DataFormat": "json",
                            "Sharing": "public",
                            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"type\",\n    \"grade\"\n  ],\n  \"properties\": {\n    \"type\": {\n      \"$id\": \"#/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Black\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"grade\": {\n      \"$id\": \"#/properties/grade\",\n      \"type\": \"string\",\n      \"title\": \"The Grade Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"SFTGFOP1\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  }\n}"
                        }
                    ],
                    "RibosomeType": "js",
                    "Functions": [
                        {
                            "Name": "teaCreate",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "teaRead",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "teaUpdate",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "teaDelete",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "listTea",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "searchTea",
                            "CallingType": "json",
                            "Exposure": "public"
                        }
                    ],
                    "BridgeFuncs": null,
                    "Config": null
                }
            ]
        }
    },
    "%agent": {
        "header": {
            "type": "%agent",
            "signature": "{[19 58 1 112 251 47 70 53 55 142 33 73 86 11 172 32 186 98 104 14 114 33 65 132 112 101 255 164 221 122 55 35 174 101 127 14 174 12 173 116 140 225 83 156 159 226 105 20 134 75 14 173 225 5 238 187 241 61 171 96 84 62 206 10]}",
            "hash": "QmVRC4QtEFMHMoWapiVoWK9ZEfrPfFi6RFZht7a63gbPHM",
            "time": "2018-10-06 14:47:56.539836389 -0400 EDT",
            "nextHeader": "QmNsQRSpDjPG3MxRKabWi2N8D4NiMP5fTCDzARtLp8TmqP",
            "next": "%agent: ",
            "entry": "QmZM6t7GKUjSNM6pPnkjZDSGMQWPbuARhvBEDJitnjBKrR"
        },
        "content": "{\"Identity\":\"changl@protonmail.com\",\"Revocation\":\"\",\"PublicKey\":\"4XTTM39tsjDmtCWd1fqrReyxw64fB2GrhYyKJKBJyY1wSS6WR\"}"
    }
}
